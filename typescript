TypeScript
1) TypeScript is an open-source, object-oriented programing      language, which is developed and maintained by Microsoft under      the Apache 2 license. 
2) It was introduced by Anders Hejlsberg, a core member of the       development team of C# language. 
3) TypeScript is a strongly typed superset of JavaScript which       compiles to plain JavaScript. 
3) JavaScript has dynamic types, hence a single variable can be       used as different types.
4) TypeScript does not directly run on the browser.
5) It needs a compiler to compile and generate in JavaScript file. 6) TypeScript is the ES6 version of JavaScript 
7) ECMAScript is a scripting-language specification standardized      by Ecma International
8) It was created to standardize JavaScript 
8) The TypeScript source file is in ".ts" extension.
9) TypeScript uses TSC (TypeScript Compiler) compiler, which       convert Typescript code (.ts file) to JavaScript (.js file).
    Ex :
	<filename>.ts  --> terminal > tsc <filename.ts>  -			  <filename>.js
10) TypeScript 3.7 is the latest version 
11) TypeScript compiles to clean, simple JavaScript code which         runs on any browser, in Node.js, or in any JavaScript engine       that supports ECMAScript 3 (or newer)
12) TypeScript supports object-oriented programming features such     as classes, interfaces, inheritance, generics, etc
13) TypeScript provides the error-checking feature at compilation     time. It will compile the code, and if any error found, then     it highlighted the mistakes before the script is run
14) TypeScript supports all JavaScript libraries because it is the     superset of JavaScript.

IDE tools 
 Visual Studio Code 
 Sublime Text
 WebStorm
 Vim, Atom, Emacs, and others

Software 
1) Node.js Installation  - https://nodejs.org/en/

cmd > node -v
cmd > npm  -v

2) create a folder 
3) cmd > npm install -g typescript

Step 1 : cmd > npm config set https-proxy http://csez-s500:8080
	 cmd > npm config set https-proxy http://bec-s400:8080
Step 2 : cmd > npm install -g typescript 
				//Install as a global module 
	 O/p typescript@3.7.4
Step 3 : Type 'tsc' in the command prompt and hit Enter
step 4 : cmd > tsc -v		// Version 3.7.4

Online Compiler for TypeScript
------------------------------
https://www.typescriptlang.org/play/index.html

Install TypeScript plug-in in your IDE
--------------------------------------
Step-1 Install IDE Eclipse
Step-2 Install TypeScript plug-in.
a) Open Eclipse and go to Help->Eclipse Market Place.
b) Search for TypeScript and choose TypeScript IDE, Click Install.
Step 3 : Now restart Eclipse. To verify the TypeScript, go to          New->Other->TypeScript.


TypeScript tutorial in Visual Studio Code
-----------------------------------------
step 1 : cmd > mkdir HelloWorld
step 2 : cmd > cd HelloWorld
step 3 : File Explorer, create a new file called 'helloworld.ts'
step 4 :  helloworld.ts
	let message: string = 'Hello World';
	console.log(message);
step 5 : To compile your TypeScript code, you can open the 	Integrated Terminal (Ctrl+`) 
		or
	Visual Studio Code --> menu --> view  --> Terminal 
step 6 : cmd > tsc helloworld.ts
 Note: compile and create a new HelloWorld.js JavaScript file
step 7 : If you have Node.js installed, you can run 
	cmd > node helloworld.js

Demo 2 : with function 
	function wishing(arg:string) {  
    		return "Hello, " + arg;  
	}  
	let user = 'Jason Daniel';  
	console.log(wishing(user));

Demo 3 : 
	function addNumbers(a:number, b:number) {  
    		return a + b;  
	}  
	var sum = addNumbers(22, 25);  
	console.log('Sum of the numbers is: ' + sum); 

TypeScript Type
----------------
1) The TypeScript language supports different types of values
	TypeScript
		1) Static Types
			a) Built-in or Primitive Type
			b) User-Defined DataType
		2) Generics 
		3) Decorators 
		

Static Types
------------
1) Static types mean "at compile time" or "without running a       program."
2) Static types can be further divided into two sub-categories
	a) Built-in or Primitive Type
	b) User-Defined DataType

Built-in or Primitive Type
--------------------------
	1) Number
	2) String
	3) Boolean
	4) Void
	5) Null
	6) Undefined
	7) Any Type

User-Defined DataType
---------------------
	1) Array
	2) Tuple
	3) Interface
	4) Class
	5) Enums
	6) Functions


number
------
1) The numeric data type can be used to represents both integers      and fractions.
demo 
	let first: number = 12.0;           // number   
	console.log(first);                 // 12 
2) TypeScript also supports Binary(Base 2), Octal(Base 8),    Decimal(Base 10), and Hexadecimal(Base 16) literals.

string
------
1) string literals is enclosing them in single or double quotation    marks.
2) It embedded the expressions in the form of $ {expr}.
  demo 
	let strVariable: string = " ";
	console.log(strVariable); 	 // empty
  demo2 :
	let empName: string = "Jason Daniel";   
	let empDept: string = "D&A";   
 	// Before-ES6  
	let output1: string = empName + " works in the " + 
			      empDept + " department."; 
	console.log (output1);
	// o/p Jason Daniel works in the D&A department.
  demo 3 :
	let empName: string = "Jason Daniel";   
	let empDept: string = "D&A";   
  
	// After-ES6  
	let output2: string = `${empName} works in the ${empDept} 			       department.`
	console.log (output2);
Note: 
a) The variable values are written as ${ }.
b) Instead of writing a string that is a combination of text and      variables with concatenations, we can use a single statement       with back-ticks ` ( symbol under tidle and not single quote)

Boolean
-------
1) Boolean data type can have only two values. They are "true" and    "false."
demo 
	let isDone: boolean = false;  
	console.log(isDone);
Void
-----
1) A void is a return type of the functions which do not return    any type of value
demo 
	function helloUser(): void {  
    	   console.log("This is a void message");  
        }  
	console.log(helloUser());
o/p
	This is a void message
	undefined
Note :
a) An undefined data type denotes uninitialized variable, whereas    null represents a variable whose value is undefined.
	let unusable: void = undefined; 

Demo :
	let tempNum: void = undefined; 
	console.log(tempNum) ;
	tempNum = null;
	console.log(tempNum) ;
Null
----
1) Null represents a variable whose value is undefined.
	let num: number = null;  
	let bool: boolean = null;   
	let str: string = null; 
Undefined
---------
1) The Undefined primitive type denotes all uninitialized    variables in TypeScript and JavaScript

Any Type
-------
1) It is the "super type" of all data type in TypeScript
2) It is used to represents any JavaScript value

	let val: any = 'Hi';  
      	val = 555;   // OK  
      	val = true;   // OK    

Demo 
	function processData(x: any, y: any) {  
   	 return x + y;  
	}  
	let result: any;  
	result = processData("Hello ", "Any!"); //Hello Any!  
	console.log( "With string as any" + result );
	result = processData(2, 3); 		//5  
	console.log( "With number as any" + result ); 

User-Defined DataType
---------------------
	1) Array
	2) Tuple
	3) Interface
	4) Class
	5) Enums
	6) Functions

Array
-----
1) An array is a collection of elements of the same data type
2) An array can be written in two ways:
	a) var list : number[] = [1, 3, 5];
	b) var list : Array<number> = [1, 3, 5]; 
			// generic array type  

Demo 
	var list : Array<number> = [1, 3, 5]; 
	console.log ("index of zero" + list[0]);
	console.log ("index of two" + list[2]);  

Tuple
------
1) The Tuple is a data type which includes two sets of values of    different data types.
demo 
var employee: [number, string] = [1, "Steve"];
console.log("Employe number : " + employee[0]);
console.log("Employe name   : " + employee[1]);
var person: [number, string, boolean] = [1, "Steve", true];
console.log("person  number    : " + person[0]);
console.log("person  name      : " + person[1]);
console.log("person  boolean   : " + person[2]);
var user: [number, string, boolean, number, string];// declare tuple variable
user = [1, "Steve", true, 20, "Admin"];            // initialize tuple variable
console.log("User   number     : " + user[0]);
console.log("user   name       : " + user[1]);
console.log("user   boolean    : " + user[2]);
console.log("User   age        : " + user[3]);
console.log("User   role       : " + user[4]);

Note :
a) You can add new elements to a tuple using the push() method.
	var employee: [number, string] = [1, "Steve"];
	employee.push(2, "Bill"); 
	console.log(employee); //Output: [1, 'Steve', 2, 'Bill']
Demo 2: Array of tuple 
	var employee1: [number, string][];
	employee1 = [[1, "Steve"], [2, "Bill"], [3, "Jeff"]];
	console.log("Employee number : " + employee1[0][0]);
	console.log("Employee name   : " + employee1[0][1]);

Interface
---------
1) Interface is a structure that defines the contract in your    application.
2) Classes that are derived from an interface must follow the    structure provided by their interface.
3) The TypeScript compiler does not convert interface to    JavaScript. It uses interface for type checking. 
4) An interface is defined with the keyword 'interface' and it can    include properties and method declarations using a function or    an arrow function.
Demo 1:
	interface Employee {
    	  empNo: number;
    	  empName: string;
	}

	let emp: Employee = { empNo:1, empName:"Steve" };    // OK
	console.log(emp);
	console.log(emp.empNo);
	console.log(emp.empName);


Interface with Function
--------------------------

	interface MyInterface {
    	  someProp: string;
    	  someFunction(): void;
	}
let myInt : MyInterface = {someProp: "Hcl",someFunction() {         			  console.log("inside function")} };
console.log(myInt.someProp);
console.log(myInt.someFunction());

Interface as Function Type (demo15)
--------------------------
1) TypeScript interface is also used to define a type of a    function

interface MyInterfaceType
{
    (propertyOne: number, propertyTwo: string): void;
};

function addMyInterfaceType(argOne:number, argTwo:string):void 
   { 
    console.log('Add MyInterfaceType: argument one = ' 
            + argOne + ', argument two = ' + argTwo);
   }

function updateMyInterfaceType( paramOne: number, 					  	        ParamTwo:string   ):void { 
    console.log('updateMyInterfaceType: param 1 = '+ 
		paramOne + ', param 2 = ' + ParamTwo);
}
    
let mit: MyInterfaceType = addMyInterfaceType;
mit(1, 'Bill'); //Output: addKeyValue: key = 1, value = Bill 

mit = updateMyInterfaceType;
mit(2, 'Steve'); //Output: updateKeyValue: key = 2, value = Steve

Note:
 Trying to assign a function with a different signature will cause  an error. 


Optional Property
-----------------
1) Sometimes, we may declare an interface with excess properties    but may not expect all objects to define all the given    interface properties. 
2) We can have optional properties, marked with a "?".
Demo 
interface IEmployee {
    empCode: number;
    empName: string;
    empDept?:string;
}

let empObj1:IEmployee = {   // OK
    empCode:1,
    empName:"Steve"
}
console.log(empObj1.empCode);
console.log(empObj1.empName);
console.log(empObj1.empDept);

let empObj2:IEmployee = {    // OK
    empCode:2,
    empName:"Bill",
    empDept:"IT"
}
console.log(empObj2.empCode);
console.log(empObj2.empName);
console.log(empObj2.empDept);


Read only Properties
--------------------
1) TypeScript provides a way to mark a property as read only. 
2) This means that once a property is assigned a value, it cannot    be changed!
interface Citizen {
    name: string;
    readonly SSN: number;
}

let personObj: Citizen  = { SSN: 007, name: 'James Bond' }

personObj.name = 'Steve Smith'; // OK
personObj.SSN = '009'; // Compiler Error

Extending Interfaces
--------------------
1) Interfaces can extend one or more interfaces. 
2) This makes writing interfaces flexible and reusable.
Demo 

export interface IPerson {
    name: string;
    gender: string;
}

interface IEmployee extends IPerson {
    empCode: number;
}

let empObj2:IEmployee = {
    empCode:1,
    name:"Bill",
    gender:"Male"
}
console.log(empObj2.empCode);
console.log(empObj2.name);
console.log(empObj2.gender);

Note : 
  a)  export is used when we have duplicate interface name ,      object reference 
  b)  or  export {};

class Implementing an Interface
------------------------
1) The Class implementing the interface needs to strictly conform      to the structure of the interface.
Demo 
interface IEmployee {
    empCode: number;
    name: string;
    display() : void;
}

class Employee implements IEmployee { 
    empCode: number;
    name: string;

    display():void
    {
        console.log("Employee code  : " + this.empCode);
        console.log("Employee name  : " + this.name);
    }
}

let emp = new Employee();
emp.empCode = 1234;
emp.name ="Jason Daniel";
emp.display();


TypeScript - Class
------------------
A class can include the following:
	a) Constructor
	b) Properties
	c) Methods
Demo 
class Employee {
    empCode: number;
    empName: string;

    constructor(code: number, name: string) {
            this.empName = name;
            this.empCode = code;
    }

    getSalary() : number {
        return 1000;
    }
}
let obj = new Employee(123,"Through Constructor");
let obj = new Employee(123);
console.log("Employee code  : " + obj.empCode);
console.log("Employee name  : " + obj.empName);
console.log("Employee salary: " + obj.getSalary());

Note :
  a) only one constructor 
  b) no overloading  
  c) The TypeScript compiler will convert the above class to the      following JavaScript code using closure
  d) Closure means that an inner function always has access to the      vars and parameters of its outer function, even after the          outer function has returned.

Constructor
----------
1) The constructor is a special type of method which is called       when creating an object
2) In TypeScript, the constructor method is always defined with      the name "constructor".
3) In the constructor, members of the class can be accessed using    this keyword e.g. this.empCode or this.name.
4) An object of the class can be created using the 'new' keyword.

Inheritance
----------
1) TypeScript classes can be extended to create new classes with    inheritance, using the keyword 'extends'.
Demo 
class Person {
    name: string;
    
    constructor(name: string) {
        this.name = name;
    }
}

class Employee extends Person {
    empCode: number;
    
    constructor(empcode: number, name:string) {
        super(name);
        this.empCode = empcode;
    }
    
    displayName():void {
        console.log("Name = " + this.name +  ", Employee Code = "                     + this.empCode);
    }
}

let emp = new Employee(100, "Bill");
emp.displayName();       // Name = Bill, Employee Code = 100

2)  The super keyword is used to call the parent constructor and      passes the property values.
3)  super() method first before assigning values to properties in      the constructor of the derived class.


Class Implement multiple Interface
----------------------------------
Demo 
interface IPerson {
    name: string;
    display():void;
}

interface IEmployee {
    empCode: number;
}

class Employee implements IPerson, IEmployee {
    empCode: number;
     name: string;
    
    constructor(empcode: number, name:string) {
        this.empCode = empcode;
        this.name = name;
    }
    
    display(): void {
        console.log("Name = " + this.name +  ", Employee Code = " 		   + this.empCode);
    }
}

let per:IPerson = new Employee(100, "Bill");
per.display(); // Name = Bill, Employee Code = 100

let emp:IEmployee = new Employee(100, "Bill");
// emp.display(); //Compiler Error: Property 'display' does not 
// exist on type 'IEmployee'

Interface extends Class
-----------------------
1) An interface can also extend a class to represent a type
Demo 
	class Person {
   	 name: string;
	}

	interface IEmployee extends Person { 
   	 empCode: number;
	}

	let emp1: IEmployee = { empCode  : 1, name:"James Bond" }
      //let emp1: IEmployee = {  name:"James Bond", empCode  : 1 }
	console.log(emp1);
Note :
  we must declare and initialize values at the same time.

Method Overriding
-----------------
1) When a child class defines its own implementation of a method    from the parent class, it is called method overriding.
Demo
class Car {
    name: string;
        
    constructor(name: string) {
        this.name = name;
    }
    
    run(speed:number) {
        console.log("A " + this.name + " is moving at " + speed +          " mph!");
    }
}

class Mercedes extends Car {
    
    constructor(name: string) {
        super(name);
    }
    
    run(speed:number) {
        console.log('A Mercedes started')
        super.run(speed);
    }
}



let mercObj = new Mercedes("Mercedes-Benz GLA");

mercObj.run(60);  // A Mercedes-Benz GLA is moving at 60 mph!

TypeScript - Abstract Class
----------------------------
1) TypeScript allows us to define an abstract class using keyword    abstract.
2) Abstract classes are mainly for inheritance where other classes    may derive from them. 
3) We cannot create an instance of an abstract class.
4) An abstract class typically includes one or more abstract    methods or property declarations. 
5) The class which extends the abstract class must define all the    abstract methods.

Demo 
abstract class APerson {
    name: string;
    
    constructor(name: string) {
        this.name = name;
    }

    display(): void{
        console.log(this.name);
    }

    abstract find(string): void;
}

class Employee extends APerson { 
    empCode: number;
    
    constructor(name: string, code: number) { 
        super(name); // must call super()
        this.empCode = code;
    }

    find(name:string): void { 
        console.log("Welcome :" + name);
    }
}

let emp: Employee = new Employee("James", 100);
emp.find('Steve');
emp.display();


TypeScript - Data Modifiers
--------------------------
1) The concept of 'Encapsulation' is used to make class members    public or private 
	
2) class can control the visibility of its data members. This is    done using access modifiers.

3) There are three types of access modifiers in TypeScript:    public, private and protected.

public
------
1) By default, all members of a class in TypeScript are public. 2) All the public members can be accessed anywhere without any    restrictions.

class Employee {
    public empCode: number;
    empName: string;
}

let emp = new Employee();
emp.empCode = 123;
emp.empName = "Jason Daniel";
console.log("Employee code : " + emp.empCode);
console.log("Employee name : " + emp.empName);

private
-------
demo 
	class Employee {
  	 private empCode: number;
    	 empName: string;
    	 display():void{
        console.log("private empcode : " +this.empCode);
       }
   }

	let emp = new Employee();
	//emp.empCode = 123; // Compiler Error
	emp.empName = "HCL";//OK
	emp.display();

protected
-----------
1) The protected access modifier is similar to the private access    modifier, except that protected members can be accessed using    their deriving classes.
Demo 

export{}
class Employee {
    public empName: string;
    protected empCode: number;

    constructor(name: string, code: number){
        this.empName = name;
        this.empCode = code;
    }
}

class SalesEmployee extends Employee{
    private department: string;
    
    constructor(name: string, code: number, department: string) {
        super(name, code);
        this.department = department;
    }
}

let emp = new SalesEmployee("John Smith", 123, "Sales");
//empObj.empCode; //Compiler Error


TypeScript - Static
------------------
1) ES6 includes static members and so does TypeScript. The static    members of a class are accessed using the class name and dot    notation, without creating an object 
   e.g. <ClassName>.<StaticMember>.
2) The static members can be defined by using the keyword static. 

Demo
class Circle {
    radius :number;
    static pi: number = 3.14;
}
console.log(Circle.pi);

let circle = new Circle();
circle.radius = 1234;
console.log ("Radius : " + circle.radius);
console.log ("PI : " + Circle.radius);


TypeScript - Module
-------------------
1) TypeScript code we write is in the global scope by default. 
2) If we have multiple files in a project, the variables,    functions, etc. written in one file are accessible in all the    other files.
   For example, consider the following TypeScript files: file1.ts    and file2.ts
file1.ts
	var greeting : string = "Hello World!";
file2.ts
	console.log(greeting); //Prints Hello World!

	greeting = "Hello TypeScript"; // allowed
Note
1)  variable 'greeting', declared in file1.ts is accessible in         file2.ts as well.
2) Anybody can easily override variables declared in the global    scope without even knowing they are doing so
3) TypeScript provides modules and namespaces in order to prevent    the default global scope of the code
4) Modules are a way to create a local scope in the file. So, all    variables, classes, functions, etc. that are declared in a    module are not accessible outside the module. 
5) A module can be created using the keyword 'export' and a module    can be used in another module using the keyword 'import'.

file1.ts
	export var greeting : string = "Hello World!";

Employee.ts
----------- 

export let age : number = 20;
export class Employee {
    empCode: number;
    empName: string;
    constructor(name: string, code: number) {
        this.empName = name;
        this.empCode = code;
    }
    displayEmployee() {
        console.log ("Employee Code: " + this.empCode + ", Employee Name: " + this.empName );
    }
}

EmployeeProcessor.ts
--------------------
import { Employee, age } from "./Employee";

let empObj = new Employee("Jason Daniel", 1);
empObj.displayEmployee();
let companyName:string = "XYZ";

TypeScript - Generic
--------------------
1) Generics offer a way to create reusable components. 
2) Generics provide a way to make components work with any data    type and not restrict to one data type
3) So, components can be called or used with a variety of data    types
4) Generics uses the type variable <T>, a special kind of variable    that denotes types.
Demo

function getGen<T>(typeVar : T) : void {
   console.log(typeof(typeVar));
}
let myNumArr1 = getGen<number>(22);
myNumArr1;
let myNumArr2 = getGen<String>("Daniel");
myNumArr2;
TypeScript - 

TypeScript - if else
----------------------

1) An if statement can include one or more expressions which       return boolean.
Demo1
let x: number = 10, y = 20;

if (x < y) 
{
    console.log('x is less than y');
} 

Demo2 : if... else

let x1: number = 10, y1 = 20;

if (x1 > y1) 
{
    console.log('x is greater than y.');
} 
else
{
    console.log('x is less than or equal to y.'); //This will be executed
}

Demo 3 : else if

let x2: number = 10, y2 = 10;

if (x2 > y2) 
{
    console.log('x2 is greater than y2.');
} 
else if (x2 < y2)
{
    console.log('x2 is less than y2.'); //This will be executed
}
else if (x2 == y2) 
{
    console.log('x2 is equal to y2');
}

Ternary operator
----------------
1) A ternary operator is denoted by '?' and is used as a short cut    for an if..else statement. 
2) It checks for a boolean condition and executes one of the two    statements, depending on the result of the boolean condition.

let x4: number = 10, y4 = 20;

x4 > y4? console.log('x4 is greater than y4.') : 
	 console.log('x4 is less than or equal to y4.')

TypeScript - switch
---------------------
Syntax:
switch(expression) { 
   case constant-expression1: { 
      //statements; 
      break; 
   } 
   case constant_expression2: { 
      //statements; 
      break; 
   } 
   default: { 
      //statements; 
      break; 
   } 
} 
Demo :
let day : number = 4;

switch (day) {
    case 0:
        console.log("It is a Sunday.");
        break;
    case 1:
        console.log("It is a Monday.");
        break;
    case 2:
        console.log("It is a Tuesday.");
        break;
    case 3:
        console.log("It is a Wednesday.");
        break;
    case 4:
        console.log("It is a Thursday.");
        break;
    case 5:
        console.log("It is a Friday.");
        break;
    case 6:
        console.log("It is a Saturday.");
        break;
    default:
        console.log("No such day exists!");
        break;
}


TypeScript - for Loops
----------------------
There are three types of for loops:

	1) for loop
	2) for..of loop
	3) for..in loop
1) for loop 
-----------
Syntax:
for (first expression; second expression; third expression ) {
    // statements to be executed repeatedly
}
Demo
for (let i = 0; i < 3; i++) {
    console.log ("Block statement execution no." + i);
  }


2) for..of loop
demo
let arr = [10, 20, 30, 40];
for (var val of arr) {
  console.log(val); // prints values: 10, 20, 30, 40
}

let str4 = "Hello World";

for (var char of str4) {
  console.log(char); // prints chars: H e l l o  W o r l d
}

3) for..in loop
1) returns an index on each iteration.
Demo
let arr = [10, 20, 30, 40];

for (var index in arr) {
  console.log(index); // prints indexes: 0, 1, 2, 3

  console.log(arr[index]); // prints elements: 10, 20, 30, 40
}

let arr = [10, 20, 30, 40];
for (var val of arr) {
  console.log(val); // prints values: 10, 20, 30, 40
}

TypeScript - Function
---------------------
demo1 :
function display() {
    console.log("Hello TypeScript!");
}

display(); //Output: Hello TypeScript 

demo2  with param and return type 
function Sum(x: number, y: number) : number {
    return x + y;
}

Sum(2,3); // returns 5

Optional Parameters
--------------------

Namespace
---------------------
1) The namespace is used for logical grouping of functionalities. 2) A namespace can include interfaces, classes, functions and    variables to support a single or a group of related    functionalities.
3) A namespace can be created using the namespace keyword followed    by the namespace
4) Defined in curly brackets { }
5) In order to use namespace components at other places, first we    need to include the namespace using the 'triple' slash    reference    
  syntax /// <reference path="path to namespace file" />


npm install -g @angular/cli 
ng new myapp 
	

npm config set https-proxy http://csez-s500:8080 (behind proxy)
npm i --unsafe-perm --verbose -g @angular/cli 
ng new myapp


https://www.tutorialsteacher.com/typescript
https://www.tutorialsteacher.com/typescript/typescript-class







import { Employee } from "./Employee";
Demo 1: 
Employee.ts
export interface Employee{
    id:number;
    name:string;
    salary:number;
    permanent:boolean;
}

sample.ts
var emp:Employee={
    id:100,
    name:"sam",
    salary:20000,
    permanent:true
}
console.log(emp.id);
console.log(emp.name);

>tsc Employee.ts
>tsc sample.ts
>node sample.js

Demo 2 : Has a relation
Step 1 :
export interface Department{
    id:number;
    name:string;
}
Step 2 : Employee.ts
import { Department } from "./Department";
import { skill } from "./skill";

export interface Employee{
    id:number;
    name:string;
    salary:number;
    permanent:boolean;
    dept:Department;//has a relation
}
Step 3 : sample.ts
import { Employee } from "./Employee";

var emp:Employee={
    id:100,
    name:"sam",
    salary:20000,
    permanent:true,
    dept:{ id:101,name:"Training"}
}
console.log(emp.id);
console.log(emp.name);
console.log(emp.dept.id);
console.log(emp.dept.name);


Demo 3:
Step 1 : skill.ts
export interface skill{
    id:number;
    name:string;
}
Step 2 : Employee.ts
import { Department } from "./Department";
import { skill } from "./skill";

export interface Employee{
    id:number;
    name:string;
    salary:number;
    permanent:boolean;
    dept:Department;//has a relation
    skill:skill[]
}
Step 3 : sample.ts

import { Employee } from "./Employee";

var emp:Employee={
    id:100,
    name:"sam",
    salary:20000,
    permanent:true,
    dept:{ id:101,name:"Training"},
    skill:[
        {id:1,name:"Java"},
        {id:2,name:"C"}
    ]
}
console.log(emp.id);
console.log(emp.name);
console.log(emp.dept.id);
console.log(emp.dept.name);
for(var i in emp.skill){
    console.log(emp.skill[i]);
}


EmployeeTest.ts



import { Employee } from "./Employee";

class EmployeeTest{
  emp:Employee;
  constructor(emps:Employee){
  this.emp=emps;
  }
display():void{
    console.log("Employee details : " + this.emp.id);
    console.log("Employee details : " + this.emp.dept.id);
    for(var i in this.emp.skill){
      console.log(this.emp.skill[i]);
    }
}

}
var obj = new EmployeeTest({id: 10, name: "ram", 
salary: 2000, permanent: true, 
dept:{id: 12, name: "HR"},
 skill:[{id:100, name:"java"}, 
 {id:101, name:"html"}]});
obj.display();
